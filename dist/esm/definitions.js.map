{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAkBA,MAAM,gBAAgB,GAAG;IACvB,mBAAmB;IACnB;;OAEG;IACH,KAAK,EAAE,OAAO;IAEd,KAAK,EAAE,OAAO;IAEd;;OAEG;IACH,iBAAiB,EAAE,mBAAmB;IAEtC,KAAK,EAAE,OAAO;IAEd,MAAM,EAAE,QAAQ;IAChB,iBAAiB;IAEjB,sBAAsB;IACtB,OAAO,EAAE,SAAS;IAElB;;OAEG;IACH,cAAc,EAAE,gBAAgB;IAEhC,OAAO,EAAE,SAAS;IAElB,QAAQ,EAAE,UAAU;IAEpB;;OAEG;IACH,OAAO,EAAE,SAAS;IAElB,GAAG,EAAE,KAAK;IAEV;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB,oBAAoB;IAEpB,WAAW;IACX,KAAK,EAAE,OAAO;IAEd,WAAW,EAAE,aAAa;IAE1B;;OAEG;IACH,QAAQ,EAAE,UAAU;IAEpB,OAAO,EAAE,SAAS;IAElB,OAAO,EAAE,SAAS;IAElB;;OAEG;IACH,MAAM,EAAE,QAAQ;IAEhB;;OAEG;IACH,YAAY,EAAE,cAAc;IAC5B,SAAS;CACD,CAAC;AAEX,MAAM,CAAC,MAAM,eAAe,GAAG,gBAE9B,CAAC;AAGF,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,KAAK,EAAE,OAAO;IACd,IAAI,EAAE,MAAM;CACJ,CAAC","sourcesContent":["export type CallbackID = string;\nexport interface BarcodeScannerPlugin {\n  prepare(options?: ScanOptions): Promise<void>;\n  hideBackground(): Promise<void>;\n  showBackground(): Promise<void>;\n  startScan(options?: ScanOptions): Promise<ScanResult>;\n  startScanning(options?: ScanOptions, callback?: (result: ScanResult, err?: any) => void): Promise<CallbackID>;\n  pauseScanning(): Promise<void>;\n  resumeScanning(): Promise<void>;\n  stopScan(options?: StopScanOptions): Promise<void>;\n  checkPermission(options?: CheckPermissionOptions): Promise<CheckPermissionResult>;\n  openAppSettings(): Promise<void>;\n  enableTorch(): Promise<void>;\n  disableTorch(): Promise<void>;\n  toggleTorch(): Promise<void>;\n  getTorchState(): Promise<TorchStateResult>;\n}\n\nconst _SupportedFormat = {\n  // BEGIN 1D Product\n  /**\n   * Android only, UPC_A is part of EAN_13 according to Apple docs\n   */\n  UPC_A: 'UPC_A',\n\n  UPC_E: 'UPC_E',\n\n  /**\n   * Android only\n   */\n  UPC_EAN_EXTENSION: 'UPC_EAN_EXTENSION',\n\n  EAN_8: 'EAN_8',\n\n  EAN_13: 'EAN_13',\n  // END 1D Product\n\n  // BEGIN 1D Industrial\n  CODE_39: 'CODE_39',\n\n  /**\n   * iOS only\n   */\n  CODE_39_MOD_43: 'CODE_39_MOD_43',\n\n  CODE_93: 'CODE_93',\n\n  CODE_128: 'CODE_128',\n\n  /**\n   * Android only\n   */\n  CODABAR: 'CODABAR',\n\n  ITF: 'ITF',\n\n  /**\n   * iOS only\n   */\n  ITF_14: 'ITF_14',\n  // END 1D Industrial\n\n  // BEGIN 2D\n  AZTEC: 'AZTEC',\n\n  DATA_MATRIX: 'DATA_MATRIX',\n\n  /**\n   * Android only\n   */\n  MAXICODE: 'MAXICODE',\n\n  PDF_417: 'PDF_417',\n\n  QR_CODE: 'QR_CODE',\n\n  /**\n   * Android only\n   */\n  RSS_14: 'RSS_14',\n\n  /**\n   * Android only\n   */\n  RSS_EXPANDED: 'RSS_EXPANDED',\n  // END 2D\n} as const;\n\nexport const SupportedFormat = _SupportedFormat satisfies {\n  [k in SupportedFormat]: k;\n};\nexport type SupportedFormat = typeof _SupportedFormat[keyof typeof _SupportedFormat];\n\nexport const CameraDirection = {\n  FRONT: 'front',\n  BACK: 'back',\n} as const;\n\nexport type CameraDirection = typeof CameraDirection[keyof typeof CameraDirection];\n\nexport interface ScanOptions {\n  /**\n   * This parameter can be used to make the scanner only recognize specific types of barcodes.\n   *  If `targetedFormats` is _not specified_ or _left empty_, _all types_ of barcodes will be targeted.\n   *\n   * @since 1.2.0\n   */\n  targetedFormats?: SupportedFormat[];\n  /**\n   * This parameter can be used to set the camera direction.\n   *\n   * @since 2.1.0\n   */\n  cameraDirection?: CameraDirection;\n}\n\nexport interface StopScanOptions {\n  /**\n   * If this is set to `true`, the `startScan` method will resolve.\n   * Additionally `hasContent` will be `false`.\n   * For more information see: https://github.com/capacitor-community/barcode-scanner/issues/17\n   *\n   * @default true\n   * @since 2.1.0\n   */\n  resolveScan?: boolean;\n}\n\nexport type ScanResult = IScanResultWithContent | IScanResultWithoutContent;\n\nexport interface IScanResultWithContent {\n  /**\n   * This indicates whether or not the scan resulted in readable content.\n   * When stopping the scan with `resolveScan` set to `true`, for example,\n   * this parameter is set to `false`, because no actual content was scanned.\n   *\n   * @since 1.0.0\n   */\n  hasContent: true;\n\n  /**\n   * This holds the content of the barcode if available.\n   *\n   * @since 1.0.0\n   */\n  content: string;\n\n  /**\n   * This returns format of scan result.\n   *\n   * @since 2.1.0\n   */\n  format: string;\n}\n\nexport interface IScanResultWithoutContent {\n  /**\n   * This indicates whether or not the scan resulted in readable content.\n   * When stopping the scan with `resolveScan` set to `true`, for example,\n   * this parameter is set to `false`, because no actual content was scanned.\n   *\n   * @since 1.0.0\n   */\n  hasContent: false;\n\n  /**\n   * This holds the content of the barcode if available.\n   *\n   * @since 1.0.0\n   */\n  content: undefined;\n\n  /**\n   * This returns format of scan result.\n   *\n   * @since 2.1.0\n   */\n  format: undefined;\n}\n\nexport interface CheckPermissionOptions {\n  /**\n   * If this is set to `true`, the user will be prompted for the permission.\n   * The prompt will only show if the permission was not yet granted and also not denied completely yet.\n   * For more information see: https://github.com/capacitor-community/barcode-scanner#permissions\n   *\n   * @default false\n   * @since 1.0.0\n   */\n  force?: boolean;\n}\n\nexport interface CheckPermissionResult {\n  /**\n   * When set to `true`, the ermission is granted.\n   */\n  granted?: boolean;\n\n  /**\n   * When set to `true`, the permission is denied and cannot be prompted for.\n   * The `openAppSettings` method should be used to let the user grant the permission.\n   *\n   * @since 1.0.0\n   */\n  denied?: boolean;\n\n  /**\n   * When this is set to `true`, the user was just prompted the permission.\n   * Ergo: a dialog, asking the user to grant the permission, was shown.\n   *\n   * @since 1.0.0\n   */\n  asked?: boolean;\n\n  /**\n   * When this is set to `true`, the user has never been prompted the permission.\n   *\n   * @since 1.0.0\n   */\n  neverAsked?: boolean;\n\n  /**\n   * iOS only\n   * When this is set to `true`, the permission cannot be requested for some reason.\n   *\n   * @since 1.0.0\n   */\n  restricted?: boolean;\n\n  /**\n   * iOS only\n   * When this is set to `true`, the permission status cannot be retrieved.\n   *\n   * @since 1.0.0\n   */\n  unknown?: boolean;\n}\n\nexport interface TorchStateResult {\n  /**\n   * Whether or not the torch is currently enabled.\n   */\n  isEnabled: boolean;\n}\n"]}